{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "42b0ef18-e70c-4180-a241-278c3b169a41",
   "metadata": {},
   "source": [
    "# PYTHON DATA TYPE #1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc07ee4-5a3e-4b54-82a8-12f992cd6242",
   "metadata": {},
   "source": [
    "A data type is an attribute associated with a piece of data that tells a computer system how to interpret its value.\n",
    "Python Data Types are used to define the type of a variable. It defines what type of data we are going to store in a variable.\n",
    "The data stored in memory can be of many types.\n",
    "- Numbers\n",
    "- String\n",
    "- Boolean"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "834524fa-20eb-4e24-b036-d90f4f25bd08",
   "metadata": {},
   "source": [
    "## NUMBER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5058082-8187-4265-970e-c0114a623a5f",
   "metadata": {},
   "source": [
    "Number type numeric in python include int, float, and complex. \n",
    "The integer data type is a numeric data type that holds whole number. \r\n",
    "The float data type is used for variables that have fractional / decimal val. The c\r\n",
    "Complex data t It represnts imaginary ue.s.\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abfcb9bd-8c2f-493f-9032-9b30378f0df4",
   "metadata": {},
   "source": [
    "Example :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "76c8c0be-4ae5-4bcb-88ea-8eb6481ad23d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# int\n",
    "a = 10\n",
    "\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71e94287-3fed-40d8-98a9-a500c5da48d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# float\n",
    "a = 6.5\n",
    "\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "edd9505e-2bd9-42dd-9291-a3c35637a0ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# complex\n",
    "c = 1 + 2j\n",
    "\n",
    "type(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05cfa4ed-77a4-4765-96ed-89328b400f99",
   "metadata": {},
   "source": [
    "## STRING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fd5e159-52c7-4afb-ae7c-e7da29f427d8",
   "metadata": {},
   "source": [
    "In Python, a string is a sequence of characters. Strings in python are surrounded by either single quotation marks, or double quotation marks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e7b3936-fb25-4256-a54a-1e285744de2e",
   "metadata": {},
   "source": [
    "Example :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ebe5494-e056-42ae-a045-639a0e37ebcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n",
      " \n",
      "Hello\n"
     ]
    }
   ],
   "source": [
    "a = \"Hello\"\n",
    "print(a)\n",
    "print(\" \")\n",
    "\n",
    "b = 'Hello'\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5515b679-f839-4066-952d-87ef117fb4eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bootcamp Data Analyst\n",
      "Kampus Merdeka x MyEduSolve\n",
      "Kelas B. \n"
     ]
    }
   ],
   "source": [
    "a = \"\"\"Bootcamp Data Analyst\n",
    "Kampus Merdeka x MyEduSolve\n",
    "Kelas B. \"\"\"\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7b4141e-b702-4694-92e2-56dc790c521c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bootcamp Data Analyst \n",
      "Kampus Merdeka x MyEduSolve \n",
      "Kelas B. \n"
     ]
    }
   ],
   "source": [
    "a = \"\"\"Bootcamp Data Analyst \\nKampus Merdeka x MyEduSolve \\nKelas B. \"\"\"\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6b14bf4-ab63-4b36-b64f-aa561c7b7ccf",
   "metadata": {},
   "source": [
    "## BOOLEAN"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2475d98e-4510-47ce-b760-a1f39fe6fefb",
   "metadata": {},
   "source": [
    "In programming you often need to know if an expression is True or False. When you compare two values, the expression is evaluated and Python returns the Boolean answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2075134d-c3c9-4c8c-ac37-892e64c41cae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n",
      "False\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "# Number\n",
    "print(15 > 9)\n",
    "print(10 == 10)\n",
    "print(7 < 5)\n",
    "\n",
    "# Text\n",
    "print(\"bit\" == \"Bit\")\n",
    "print(\"abjad\" > \"Abjad\")\n",
    "print(\"abjad\" > \"abjaf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78a4932f-5729-4d80-8116-70790dca800c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
