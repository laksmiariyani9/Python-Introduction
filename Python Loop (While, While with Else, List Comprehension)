{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "70804862-fd51-4cbf-a119-63a6be62d1a9",
   "metadata": {},
   "source": [
    "WHILE LOOP"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "b2d33860-0914-42d7-94df-3762f2c3b78b",
   "metadata": {},
   "source": [
    "Description\r\n",
    "\n",
    "A while loop in Python is a control flow statement that allows a block of code to be executed repeatedly based on a given Boolean condition. In other words, the while loop will keep iterating and running the code block inside of it until the specified condition evaluates to False. A while loop in Python continually executes a code block if a specified condition is true. The Loop will run the code block repeatedly until the condition becomes false. Once the condition is false, the program exits the while loop and continue.ample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d890fba6-ef32-4296-82e6-f2e3e6c8057a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Syntax\n",
    "\n",
    "While condition:\n",
    "    statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14bcf0e2-b49b-4f48-bd13-d1ca11df2d99",
   "metadata": {},
   "outputs": [],
   "source": [
    "Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "80924378-acdb-4d0f-b237-e2168cd7a524",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "counter = 0\n",
    "\n",
    "while counter < 10:\n",
    "    print(counter)\n",
    "    counter = counter + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36149c72-8040-4392-add6-1d728897c985",
   "metadata": {},
   "source": [
    "This code is an example of Python while Loop. The code initializes a counter variable to 0, then prints the counter value and increments the counter by 1 until the counter is no longer less than 10. The output of this code will be a list of numbers from 0 to 9."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e36766c2-eddc-41b1-a9d8-b7dd480afa2a",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "257433c6-51d7-4a61-881f-167ae1f9aedf",
   "metadata": {},
   "source": [
    "WHILE LOOP with ELSE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aca401fa-a735-4b59-887d-f04f59804c92",
   "metadata": {},
   "source": [
    "Description: \r\n",
    "\n",
    "A while loop with else executes a block of code as long as a given condition is true. Once the condition becomes false, the else block of code is executed. The else block of code is executed only if the condition is false. This is useful for ensuring that certain code is executed at least once or after the while loop ends. \n",
    "\r\n",
    "Note: The else block just after for/while is executed only when the loop is NOT terminated by a break statement."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d54ef12a-bf61-493a-ac12-6eb44d6abc34",
   "metadata": {},
   "source": [
    "Syntax : \r\n",
    "while <condition>:\r\n",
    "    <code to execute>\r\n",
    "else:\r\n",
    "    <code to execte>\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4647a1-b951-40f3-bd2c-4e05f3a2db04",
   "metadata": {},
   "source": [
    "Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2849798d-c211-4db4-b7bf-f28028e6b603",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first number divisible by 7 is 0\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "while (i <= 100 and i % 7 != 0):\n",
    "  i += 1\n",
    "else:\n",
    "  if (i % 7 == 0):\n",
    "    print(\"The first number divisible by 7 is\", i)\n",
    "  else:\n",
    "    print(\"No number is divisible by 7\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a9d67d8-c3b4-4dc9-bd5e-e8b5adce0fb2",
   "metadata": {},
   "source": [
    "This code uses a while loop with an else statement to find the first number divisible by 7 between 0 and 100. The while loop checks if the value of i is less than or equal to 100 and is not divisible by 7, and if it is not, then it increments the value of i by 1. The else statement checks if the value of i is divisible by 7; if it is, then it prints the value of i. If the while loop fails to find any number divisible by 7, then the else statement prints that no number is divisible by 7."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "813b5035-4c5b-4aea-a3bf-bad915c2b6a9",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "da627bd5-82e5-4f36-be7d-d09804979f6a",
   "metadata": {},
   "source": [
    "LIST COMPREHENSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ded4b919-6c13-49bb-9f67-784453233066",
   "metadata": {},
   "source": [
    "Description: \r\n",
    "\n",
    "List Comprehension is a way to generate new lists based on previously existing lists or iterables. List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ff4b9e6-7d40-45d2-813d-eb472230e2c1",
   "metadata": {},
   "source": [
    "Syntax : \r\n",
    "\r\n",
    "newlist = [expressn n f r it m in iterable if condition == True]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a26a354-dc16-45ea-b7de-f99aff5b432f",
   "metadata": {},
   "source": [
    "Example"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02d88839-fc6d-47fa-b3c5-785c7f5bf5ba",
   "metadata": {},
   "source": [
    "Based on a list of fruits, you want a new list, containing only the fruits with the letter \"a\" in the name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "28c5fb22-72c5-48cf-8ca8-9bc6203ec173",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'mango']\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\n",
    "\n",
    "newlist = [x for x in fruits if \"a\" in x]\n",
    "\n",
    "print(newlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24aefd0a-5c3c-43f6-8ce4-02ccc0447aab",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c1bb424f-e268-4a87-b9a2-750fa17b24b1",
   "metadata": {},
   "source": [
    "LIST COMPREHENSION with CONDITION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a62379f8-3593-410b-84ad-b029df2a6b76",
   "metadata": {},
   "source": [
    "The condition is like a filter that only accepts the items that valuate to True."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d47158b-d3a7-4fb4-b11e-41da2d0fde4d",
   "metadata": {},
   "source": [
    "Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7bdb6584-97d1-4b45-852d-7d3a04794ac1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'cherry', 'kiwi', 'mango']\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\n",
    "\n",
    "newlist = [x for x in fruits if x != \"apple\"]\n",
    "\n",
    "print(newlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2ac256b-0dbf-4755-a9fa-eddad9997553",
   "metadata": {},
   "source": [
    "The condition if x != \"apple\" will return True for all elements other than \"apple\", making the new list contain all fruits except \"apple\"."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1480643e-075d-4d90-bcdb-39bd55464bfe",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "48ef22ee-e47c-44f3-9b39-2d42301c006a",
   "metadata": {},
   "source": [
    "LIST COMPREHENSION with EXPRESSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a074dc7-832c-4e4a-bd45-b7ab6ccda3ae",
   "metadata": {},
   "source": [
    "The expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a9af8b-c622-49e5-855a-9e3fda7d8fab",
   "metadata": {},
   "source": [
    "Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "266216fe-4e1b-46ab-813b-71376e9d9a6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['APPLE', 'BANANA', 'CHERRY', 'KIWI', 'MANGO']\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\n",
    "\n",
    "newlist = [x.upper() for x in fruits]\n",
    "\n",
    "print(newlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66dfdb58-c952-4000-8f52-d9b3f5c9ef9a",
   "metadata": {},
   "source": [
    "This code creates a new list called newlist by applying the upper() method to each element in the fruits list. The upper() method converts all characters in a string to uppercase."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
